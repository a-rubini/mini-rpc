
	trivial-server and trivial-client
	---------------------------------

These two were called sample-server and sample-client in earlier
snapshots of the package (when no examples subdirectory existed).

The server exports three functions:

    sum: it receives two integers and returns integer

    gettimeofday: it receives nothing and returns struct timeval

    sqrt: it receives one double and returns one double

The server shows how the minipc_pd structures are built and how the
minipc_f function is implemented.  The first function in the file is a
non-rpc aware function, properly wrapped by the second function.

In this case the main loop of the server is simply calling the
server action, without doing anyting else. It is verbose in its
own looping and declares stderr as logfile for the library.


The client declares the same "struct minipc_pd" as the server (more
serious users should define them in a separate object file so they
would be shared). It simply calls the server functions a few times,
with a 0.5s delay between each call.

You can test it like this from two different terminal sessions:

    ./trivial-server

    for n in $(seq 1 20); do
        ./trivial-client &
	 sleep 0.2
    done



	pty-server and pty-client
	-------------------------

This is a more complete example. It shows how to multiplex rpc
operations and other operations by using th rpc fd_set together with
your own channels.

The server creates a pty and runs an underlying shell. If feeds its
own stdin to the shell and the shell's stdout to its own stdout.  Call
it with no arguments. It logs to /tmp/pty-server.XXXXXX, created with
mkstemp().

The rpc client (called pty-client) can ask for the statistics of
bytes read/written in the new pty that has been created, can read
or write environment variables in the pty-server application, it
can feed strings to the shell driven by the pty server, run strlen
and strcat remotely, and remotely
run the stat system call (to check string and structure exchange).  Each
pty-client run takes a commandline, like this:

	./pty-client count
	./pty-client getenv <name>
	./pty-client setenv <name> <value>
	./pty-client feed <shell-command>
	./pty-client strlen <string>
	./pty-client strcat <string> <string>
	./pty-client stat <filename>

The commands count, feed, strlen, strcat and stat can be verified
by just inspecting the output. The setenv command and getenv commands
can be cross-verified.

Note that only one pty-server can be running at a time (as the rpc
socket is a static name).

The sharing of minipc_pd (procedure description) is accomplished by
linking the same object file in both programs, to avoid code duplication.