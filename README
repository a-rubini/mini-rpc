
This is a mini remote procedure call, but I called it IPC in error.

It currently being suggested as a replacement for what we have in the
white rabbit system, because the way it is there is not portable
(assembly code and knowledge of the ABI is required for each
platform).  Nonetheless, I borrow quite some idea from the
implementation by Tomek (Tomasz Wlostowski), who must definitely be
considered co-author and my inspiring muse.

	Basic Ideas
	-----------

The package is meant to be as simple as possible, while still having
some abstraction to be useable on different environments than the
white rabbit switch.  There are other RPC environments, but they are
usually oversized for our needs. Besides, I personally love small
things that I can use as completely-understandable examples when
teaching.

A process can be a server, or a client, or both.  A server program
opens a Unix domain socket and then accepts client programs. Thus,
performing a server action means either accepting a new client or
performing a client request.  To avoid requiring the library
to be the only I/O of the process, I export the fd_set structure
defining the server active file descriptors (I don't directly
support poll(2), only select(2)).

A client program only works on a single file descriptor, so extracting
the fd is supported (thus you can use poll yourself).

An exported function is defined by a data structure, which lists both
the argument list and the return value. Data types supported are
integers, floats, strings and generic structures.  We might (or might
not) export the thing over TCP and add endian conversion, but at this
point the data type is really just informative.

An argument list is a zero-terminated array of 32-bit integers, which
specify both the type and the size of the argument being passed.
The return value is a single 32-bit integer specifying type and size.
The header provides macros to build the actual values.

	Sharing information
	-------------------

Client and server must agree on the functions being called remotely.
A function is identified by either an integer ID or a string ID; I
suggest you assign the string id (a 4-byte string, but the space
allocated is 8 byte so you can us a zero-terminated string with 4
meaningful bytes.

This is the "procedure definition" structure:

struct minipc_pd {
        minipc_f *f;            /* pointer to the function */
        union id {
                uint32_t  i;    /* integer description, used in lookup */
                char s[8];      /* string description, only 4 bytes used */
        }
        uint32_t flags;
        uint32_t retval;        /* type of return value */
        uint32_t args[];        /* the list of arguments, null-terminated */
};


Client and server are expected to share a data structure, or at least
the macros used to build the data structure, as ID, arg list and
retval should match.  The server will then fill the function
pointer. The only flag here is "MINIPC_FLAG_VERBOSE", used to get
diagnostic messages on the marshall and unmarshall operations.


        The client
        ----------

The client will create a client channel. The "minipc_ch" structure
simply hosts a file descriptor, so you have these functions:

  struct minipc_ch *minipc_client_create(const char *name, int flags);
  int minipc_fileno(struct minipc_ch *ch);

With the fileno a client may poll for writing, although it is not
usually needed (the server will only send reply packets, one reply
for each request.

A client can make a request like this:

  int minipc_call(struct minipc_ch *ch, const struct minipc_pd *pd,
                void *ret, void *args);

The arguments must be filled and the return value is set on return.
Arguments are passed as a zero-terminated array of generic pointers.
The minipc_call will pick data from each pointer according to the
argument types set forth in the "pd" procedure definition. Similarly,
the return value is stored where pointed by ret, according to pd->retval.
The "minipc_call" returns 0 on success and -1 with errno on failure.
Remote failures are reported as EREMOTEIO, storing an integer number
on the retval pointer (please ensure retval does not point to an
individual byte).

To close the connection, a client can call

  int minipc_close(struct minipc_ch *ch);


        Diagnostics
        -----------

Besides the "MINIPC_FLAG_VERBOSE" associated with as single function,
a "minipc_ch" channel can have an associated log file (you may
use stderr or whatever). This function sets the log file:

  int minipc_set_logfile(struct minipc_ch *ch, FILE *logf);

You can set the logfile to NULL (default at channel creation) if you
want to stop sending diagnostics. The function does not open or
close the file, as it wouldn't work with stderr, so if you want
to open a log file on disk, it's your duty to do so (and possibly
set it as unbuffered, since the library only calls fprintf on it).


        The server
        ----------

The server must open a server channel and process requests as needed.
The following functions are available for the server:

  struct minipc_ch *minipc_server_create(const char *name, int flags);

  int minipc_export(struct minipc_ch *ch, const char *name,
                  const struct minipc_pd *pd);
  int minipc_unexport(struct minipc_ch *ch, const char *name,
                    const struct minipc_pd *pd);

  int minipc_server_action(struct minipc_ch *ch, int timeoutms);

  int minipc_server_get_fdset(struct minipc_ch *ch, fd_set *setptr);


The export and unexport functions should be self-explicative. The name
is only used for diagnostics, if the connection has an associated log
file (you should pass meaningful names in any case).

The server action either accepts a new client or handles all pending
client requests. For every packet received from a client, a reply
packet is sent back. So, even if communication is based on SOCK_STREAM,
packet boundaries should be preserved.

the "get_fdset" function returns an fdset structure, so the caller
may use select() in the main loop by augmenting the minipc fdset
with its oen.  The server action calls poll on itself (with the
specified timeout), so if you already used select you can pass 0
as timeoutms in minipc_server_action.

The functions being exported are typedef'd as follows:

  typedef int (minipc_f)(const struct minipc_pd *, void *retval, void *args);

They receive a pointer to themselves, a pointer to the unmarshalled
arguments and a pointer to the data being returned.  Thus, the
function itself should pick up data from the pointers (they are
usually pointing to the packet buffer, so you should not change
the arguments themselves before calling the real function with the
ABI of the current CPU.

For example, exporting sqrt will look like the following

  extern double sqrt(double x);

  int export_sqrt(const struct minipc_pd *pd, void *retval, void *args)
  {
        double in, out;

        in = *(double *)args[0];
        out = sqrt(input);
        *(double *)retval = out;
	return 0;
   }

   struct minipc_pd sqrt_pd = {
         .f = export_sqrt,
         .id.s = "sqrt",
         .retval = MINIPC_ARG_ENCODE(MINIPC_AT_DOUBLE, double),
         .args = { MINIPC_ARG_ENCODE(MINIPC_AT_DOUBLE, double), NULL},
   }

The client calling this service will work like this:

   int call_sqrt(const struct minipc_ch *ch,const struct minipc_pd *pd,
	 double *out, double in)
   {
	  void *args[2] = {&in, NULL};

	  return minipc_call(ch, pd, out, args);
   }

